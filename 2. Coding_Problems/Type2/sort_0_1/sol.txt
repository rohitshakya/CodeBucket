approach 1
void segregate0and1(int arr[], int n) 
{ 
    int count = 0; // Counts the no of zeros in arr 
  
    for (int i = 0; i < n; i++) { 
        if (arr[i] == 0) 
            count++; 
    } 
  
    // Loop fills the arr with 0 until count 
    for (int i = 0; i < count; i++) 
        arr[i] = 0; 
  
    // Loop fills remaining arr space with 1 
    for (int i = count; i < n; i++) 
        arr[i] = 1; 
} 

approach 2
void segregate0and1(int arr[], int size)  
{  
    /* Initialize left and right indexes */
    int left = 0, right = size-1;  
  
    while (left < right)  
    {  
        /* Increment left index while we see 0 at left */
        while (arr[left] == 0 && left < right)  
            left++;  
  
        /* Decrement right index while we see 1 at right */
        while (arr[right] == 1 && left < right)  
            right--;  
  
        /* If left is smaller than right then there is a 1 at left  
        and a 0 at right. Exchange arr[left] and arr[right]*/
        if (left < right)  
        {  
            arr[left] = 0;  
            arr[right] = 1;  
            left++;  
            right--;  
        }  
    }  
}


