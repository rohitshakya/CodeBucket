class MyCircularQueue {
public:
    int front , rear, size ;
    vector <int> arr;
   
    
    /** Initialize your data structure here. Set the size of the queue to be k. */
    MyCircularQueue(int k) {
    arr= vector <int> (k,0);
        front=-1;
        rear=-1;
        size=k;
        
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    bool enQueue(int value) {
         
        if(front==-1 && rear==-1)       //empty
        {
           front=0;
            rear=0;
           arr[rear]=value;
          }
    
        else if((front==0 && rear==size-1) || front==rear+1)     //full
        {
            return false;
        }
        else if(rear==size-1)
        {
            rear=0;
            arr[rear]=value;
         }
        else
        {
            rear++;
            arr[rear]=value;
           
        }
         
        return true;
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    bool deQueue() {
         
        if(front==-1 && rear==-1)        //empty
            return false;
        else if(front ==rear)       // one ele only
        {
            front=-1;
            rear=-1;
            
        }
        else if (front==size-1)
        {
            front=0;
        }
        else
        {
            front++;
            
        }
        return true;
    }
    
    /** Get the front item from the queue. */
    int Front() {
        if (front==-1)
            return -1;
        else
            return arr[front];
    }
    
    /** Get the last item from the queue. */
    int Rear() {
        if (rear==-1)
            return -1;
        else return arr[rear];
    }
    
    /** Checks whether the circular queue is empty or not. */
    bool isEmpty() {
        if(front==-1 && rear==-1)
            return true;
        else
            return false;
    }
    
    /** Checks whether the circular queue is full or not. */
    bool isFull() {
        if ((front==rear+1 ) || (front==0 && rear==size-1))
            return true;
        else
             return false;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */